(!******************************************************
  file myqxprstest2.mos
  `````````````````````
  Testing myqxprs:
  * loop over problem solving with constraint redefinition
    
  author: S.Heipcke, Apr. 2018

  (c) Copyright 2018 Fair Isaac Corporation
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*******************************************************!) 
model "Problem solving loop"
  uses "myqxprs"                   ! Load the solver module
  options keepassert

  declarations
    RN = 1..5                      ! Set of points
    CX,CY: array(RN) of real       ! Target location for each point
    x,y: array(RN) of mpvar        ! Decision variables
   end-declarations

  CX::[-5,5,5,-5,0]; CY::[5,5,-5,-5,0]

 ! Set bounds on variables
  forall(i in RN) do
    -10<=x(i); x(i)<=10
    -10<=y(i); y(i)<=10
  end-do

 ! Objective: minimise the total squared distance between all points
  TotDist:= sum(i,j in RN | i<j) ((x(i)-x(j))^2+(y(i)-y(j))^2)

 ! Setting solver parameters
  setparam("myxp_verbose", false)      ! Display solver log

  lastsol:=MAX_REAL
  forall(r in [0.5,1,1.5,2,2.5]) do
   ! (Re)define constraints
    forall(i in RN) 
      LimDist(i):= (x(i)-CX(i))^2+(y(i)-CY(i))^2 <= r

   ! Solve the problem (includes matrix generation) 
    minimize(TotDist)

   ! Retrieve a solver parameter
    assert(getparam("myxp_lpstatus")=MYXP_LP_OPTIMAL, "Wrong status")
    assert(getprobstat=MYXP_OPT, "Problem not optimal")
   ! Access solution information
    if getprobstat = MYXP_OPT then
      writeln("Solution: ", getobjval) 
      assert(getobjval<lastsol, "Solution too small")
      lastsol:=getobjval
    else
      writeln("No solution found")
    end-if
  end-do

end-model

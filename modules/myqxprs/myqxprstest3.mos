(!******************************************************
  file myqxprstest3.mos
  `````````````````````
  Testing myqxprs:
  * multiple problems
    
  author: S.Heipcke, Apr. 2018

  (c) Copyright 2018 Fair Isaac Corporation
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*******************************************************!) 
model "Multiple problems"
  uses "myqxprs"                   ! Load the solver module
  options keepassert

  declarations
    RN = 1..5                      ! Set of points
    CX,CY: array(RN) of real       ! Target location for each point
    x,y: array(RN) of mpvar        ! Decision variables
    p1, p2, p3: mpproblem
  end-declarations

  CX::[-5,5,5,-5,0]; CY::[5,5,-5,-5,0]

  procedure printsol(pname: string)
    numfmt:=getparam("realfmt")
    setparam("realfmt", "%.3g")
    writeln("Problem ", pname)
    if getprobstat = MYXP_OPT then
      writeln("Solution: ", getobjval)    
      forall(i in RN) writeln(i, ": ", getsol(x(i)), ", ", getsol(y(i)))
    else
      writeln("No solution found")
    end-if
    setparam("realfmt", numfmt)
  end-procedure

  with p1 do 
   ! Set bounds on variables
    forall(i in RN) do
      -10<=x(i); x(i)<=10
      -10<=y(i); y(i)<=10
    end-do

   ! Objective: minimise the total squared distance between all points
    TotDist:= sum(i,j in RN | i<j) ((x(i)-x(j))^2+(y(i)-y(j))^2)

   ! Constraints: all points within given distance of their target location
    forall(i in RN) 
      LimDist(i):= (x(i)-CX(i))^2+(y(i)-CY(i))^2 <= 1

    setparam("myxp_verbose", true)      ! Display solver log
    minimize(TotDist)                   ! Solve the problem 
    assert(getparam("myxp_lpstatus")=MYXP_LP_OPTIMAL, "Wrong status")
    assert(getprobstat=MYXP_OPT, "Problem not optimal")
    assert(round(getobjval)=737, "Wrong solution")
    writeln("Solution 1: ", getobjval)
  end-do

  p2:=p1                                ! Copy the problem definition  
  with p2 do
    forall(i in RN) do
      x(i) is_integer; y(i) is_integer  ! Turn problem into an MIQP
    end-do
    setparam("myxp_verbose", false)     ! Display solver log
    minimize(TotDist)                   ! Solve the modified problem
    assert(round(getobjval)=816)
    writeln("Solution 2: ", getobjval)
  end-do

  with p3 do
   ! Set bounds on variables
    forall(i in RN) do
      -10<=x(i); x(i)<=10
      -10<=y(i); y(i)<=10
    end-do
   ! Create some linear constraints
    forall(i in RN) do
      x(i)+y(i)>=minlist(CX(i),CY(i))-1
      x(i)+y(i)<=maxlist(CX(i),CY(i))+1
    end-do

    setparam("myxp_verbose", false)     ! Display solver log
    minimize(TotDist)                   ! Solve the modified problem
    assert(round(getobjval)=80)
    writeln("Solution 3: ", getobjval)
  end-do

  with p1 do
    assert(getprobstat=MYXP_OPT, "P1 not optimal")
    printsol("P1")
    assert(round(getobjval)=737)
  end-do
  with p2 do
    assert(getprobstat=MYXP_OPT, "P2 not optimal")
    printsol("P2")
    assert(round(getobjval)=816)
  end-do
  with p3 do
    assert(getprobstat=MYXP_OPT, "P3 not optimal")
    printsol("P3")
    assert(round(getobjval)=80)
  end-do

end-model
